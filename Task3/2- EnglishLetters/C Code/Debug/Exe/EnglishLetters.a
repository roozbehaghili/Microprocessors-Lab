;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/31/2020
;Author  : Roozbeh Aghili
;Company : Kharazmi University
;Comments: Creating a LCD showing English Letters on it
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <alcd.h>
;
;int initial = 65;
;int timerOverflow = 0;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void){
; 0000 001F interrupt [9] void timer1_ovf_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0020     if(initial < 91){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0021         timerOverflow++;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0022         if(timerOverflow == 40)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0023         {
; 0000 0024             char buffer[100];
; 0000 0025             sprintf(buffer, "%c",(char) initial );
;PCODE: $00000018 VOL: 0
;	buffer -> Y+0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0026             lcd_puts(buffer);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0027             initial++;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0028             timerOverflow = 0;
;PCODE: $0000002A VOL: 0
; 0000 0029         }
;PCODE: $0000002B VOL: 0
; 0000 002A     }
;PCODE: $0000002C VOL: 0
; 0000 002B 
; 0000 002C     TCNT1H = 0xFF;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002D     TCNT1L = 0xFE;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002E }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void main(void){
; 0000 0030 void main(void){
;PCODE: $00000035 VOL: 0
; 0000 0031 lcd_init(20);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0032 
; 0000 0033 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0034 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0035 TCNT1H = 0xFF;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0036 TCNT1L = 0xFE;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0037 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0038 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0039 MCUCSR=(0<<ISC2);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003A 
; 0000 003B #asm("sei")
;PCODE: $00000046 VOL: 0
	sei
;PCODE: $00000047 VOL: 0
; 0000 003C while (1){}
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 003D }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
